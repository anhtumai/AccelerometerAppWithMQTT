{"version":3,"sources":["node_modules/paho-mqtt/paho-mqtt.js","src/app/home/home.page.html","src/app/home/home.module.ts","src/app/home/home.page.scss","src/app/home/home.page.ts"],"names":[],"mappings":"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","sourcesContent":["/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nvar client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  var message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n\tif(typeof exports === \"object\" && typeof module === \"object\"){\n\t\tmodule.exports = factory();\n\t} else if (typeof define === \"function\" && define.amd){\n\t\tdefine(factory);\n\t} else if (typeof exports === \"object\"){\n\t\texports = factory();\n\t} else {\n\t\t//if (typeof root.Paho === \"undefined\"){\n\t\t//\troot.Paho = {};\n\t\t//}\n\t\troot.Paho = factory();\n\t}\n})(this, function LibraryFactory(){\n\n\n\tvar PahoMQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\tvar version = \"@VERSION@-@BUILDLEVEL@\";\n\n\t/**\n\t * @private\n\t */\n\tvar localStorage = global.localStorage || (function () {\n\t\tvar data = {};\n\n\t\treturn {\n\t\t\tsetItem: function (key, item) { data[key] = item; },\n\t\t\tgetItem: function (key) { return data[key]; },\n\t\t\tremoveItem: function (key) { delete data[key]; },\n\t\t};\n\t})();\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar MESSAGE_TYPE = {\n\t\t\tCONNECT: 1,\n\t\t\tCONNACK: 2,\n\t\t\tPUBLISH: 3,\n\t\t\tPUBACK: 4,\n\t\t\tPUBREC: 5,\n\t\t\tPUBREL: 6,\n\t\t\tPUBCOMP: 7,\n\t\t\tSUBSCRIBE: 8,\n\t\t\tSUBACK: 9,\n\t\t\tUNSUBSCRIBE: 10,\n\t\t\tUNSUBACK: 11,\n\t\t\tPINGREQ: 12,\n\t\t\tPINGRESP: 13,\n\t\t\tDISCONNECT: 14\n\t\t};\n\n\t\t// Collection of utility methods used to simplify module code\n\t\t// and promote the DRY pattern.\n\n\t\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\t\tvar validate = function(obj, keys) {\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\t\tfor (var validKey in keys)\n\t\t\t\t\t\t\tif (keys.hasOwnProperty(validKey))\n\t\t\t\t\t\t\t\terrorStr = errorStr+\" \"+validKey;\n\t\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\t\tvar scope = function (f, scope) {\n\t\t\treturn function () {\n\t\t\t\treturn f.apply(scope, arguments);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar ERROR = {\n\t\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t\t\tBUFFER_FULL: {code:18, text:\"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"},\n\t\t};\n\n\t\t/** CONNACK RC Meaning. */\n\t\tvar CONNACK_RC = {\n\t\t\t0:\"Connection Accepted\",\n\t\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t\t2:\"Connection Refused: identifier rejected\",\n\t\t\t3:\"Connection Refused: server unavailable\",\n\t\t\t4:\"Connection Refused: bad user name or password\",\n\t\t\t5:\"Connection Refused: not authorized\"\n\t\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\t\tvar format = function(error, substitutions) {\n\t\t\tvar text = error.text;\n\t\t\tif (substitutions) {\n\t\t\t\tvar field,start;\n\t\t\t\tfor (var i=0; i<substitutions.length; i++) {\n\t\t\t\t\tfield = \"{\"+i+\"}\";\n\t\t\t\t\tstart = text.indexOf(field);\n\t\t\t\t\tif(start > 0) {\n\t\t\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\t\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\t\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\t\tvar WireMessage = function (type, options) {\n\t\t\tthis.type = type;\n\t\t\tfor (var name in options) {\n\t\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\t\tthis[name] = options[name];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\t\tvar remLength = 0;\n\t\t\tvar topicStrLength = [];\n\t\t\tvar destinationNameLength = 0;\n\t\t\tvar willMessagePayloadBytes;\n\n\t\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tremLength += 2;\n\n\t\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\twillMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now we can allocate a buffer for the message\n\n\t\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t\t//Write the fixed header into the buffer\n\t\t\tbyteStream[0] = first;\n\t\t\tbyteStream.set(mbi,1);\n\n\t\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar connectFlags = 0;\n\t\t\t\tif (this.cleanSession)\n\t\t\t\t\tconnectFlags = 0x02;\n\t\t\t\tif (this.willMessage !== undefined ) {\n\t\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tconnectFlags |= 0x80;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tconnectFlags |= 0x40;\n\t\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t\t}\n\n\t\t\t// Output the messageIdentifier - if there is one\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREC:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREL:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t};\n\n\t\tfunction decodeMessage(input,pos) {\n\t\t\tvar startingPos = pos;\n\t\t\tvar first = input[pos];\n\t\t\tvar type = first >> 4;\n\t\t\tvar messageInfo = first &= 0x0f;\n\t\t\tpos += 1;\n\n\n\t\t\t// Decode the remaining length (MBI format)\n\n\t\t\tvar digit;\n\t\t\tvar remLength = 0;\n\t\t\tvar multiplier = 1;\n\t\t\tdo {\n\t\t\t\tif (pos == input.length) {\n\t\t\t\t\treturn [null,startingPos];\n\t\t\t\t}\n\t\t\t\tdigit = input[pos++];\n\t\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\t\tmultiplier *= 128;\n\t\t\t} while ((digit & 0x80) !== 0);\n\n\t\t\tvar endPos = pos+remLength;\n\t\t\tif (endPos > input.length) {\n\t\t\t\treturn [null,startingPos];\n\t\t\t}\n\n\t\t\tvar wireMessage = new WireMessage(type);\n\t\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\n\t\t\t\tvar message = new Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn [wireMessage,endPos];\n\t\t}\n\n\t\tfunction writeUint16(input, buffer, offset) {\n\t\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\t\tbuffer[offset++] = input % 256;     //LSB\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\t\tstringToUTF8(input, buffer, offset);\n\t\t\treturn offset + utf8Length;\n\t\t}\n\n\t\tfunction readUint16(buffer, offset) {\n\t\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t\t}\n\n\t\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\t\tfunction encodeMBI(number) {\n\t\t\tvar output = new Array(1);\n\t\t\tvar numBytes = 0;\n\n\t\t\tdo {\n\t\t\t\tvar digit = number % 128;\n\t\t\t\tnumber = number >> 7;\n\t\t\t\tif (number > 0) {\n\t\t\t\t\tdigit |= 0x80;\n\t\t\t\t}\n\t\t\t\toutput[numBytes++] = digit;\n\t\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\t\tfunction UTF8Length(input) {\n\t\t\tvar output = 0;\n\t\t\tfor (var i = 0; i<input.length; i++)\n\t\t\t{\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t{\n\t\t\t\t\t// Surrogate pair means its a 4 byte character\n\t\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t\toutput +=3;\n\t\t\t\t}\n\t\t\t\telse if (charCode > 0x7F)\n\t\t\t\t\toutput +=2;\n\t\t\t\telse\n\t\t\t\t\toutput++;\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\t\tfunction stringToUTF8(input, output, start) {\n\t\t\tvar pos = start;\n\t\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t\t// Check for a surrogate pair.\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t\t}\n\t\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t\t}\n\n\t\t\t\tif (charCode <= 0x7F) {\n\t\t\t\t\toutput[pos++] = charCode;\n\t\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else {\n\t\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tfunction parseUTF8(input, offset, length) {\n\t\t\tvar output = \"\";\n\t\t\tvar utf16;\n\t\t\tvar pos = offset;\n\n\t\t\twhile (pos < offset+length)\n\t\t\t{\n\t\t\t\tvar byte1 = input[pos++];\n\t\t\t\tif (byte1 < 128)\n\t\t\t\t\tutf16 = byte1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\t\tif (byte2 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar byte4 = input[pos++]-128;\n\t\t\t\t\t\t\tif (byte4 < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\tif (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\tutf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t\t\telse                     // longer encodings are not supported\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t{\n\t\t\t\t\tutf16 -= 0x10000;\n\t\t\t\t\toutput += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\tutf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t}\n\t\t\t\toutput += String.fromCharCode(utf16);\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\t\tvar Pinger = function(client, keepAliveInterval) {\n\t\t\tthis._client = client;\n\t\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\t\tthis.isReset = false;\n\n\t\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\t\tvar doTimeout = function (pinger) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn doPing.apply(pinger);\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/** @ignore */\n\t\t\tvar doPing = function() {\n\t\t\t\tif (!this.isReset) {\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t\t} else {\n\t\t\t\t\tthis.isReset = false;\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.reset = function() {\n\t\t\t\tthis.isReset = true;\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t};\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\t\tvar Timeout = function(client, timeoutSeconds, action, args) {\n\t\t\tif (!timeoutSeconds)\n\t\t\t\ttimeoutSeconds = 30;\n\n\t\t\tvar doTimeout = function (action, client, args) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn action.apply(client, args);\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t/**\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\t\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\t\tif (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t\t}\n\t\t\tif (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t\t}\n\t\t\tthis._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n\t\t\tthis.host = host;\n\t\t\tthis.port = port;\n\t\t\tthis.path = path;\n\t\t\tthis.uri = uri;\n\t\t\tthis.clientId = clientId;\n\t\t\tthis._wsuri = null;\n\n\t\t\t// Local storagekeys are qualified with the following string.\n\t\t\t// The conditional inclusion of path in the key is for backward\n\t\t\t// compatibility to when the path was not configurable and assumed to\n\t\t\t// be /mqtt\n\t\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t\t// Create private instance-only message queue\n\t\t\t// Internal queue of messages to be sent, in sending order.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\n\t\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\t\tthis._sentMessages = {};\n\n\t\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t\t// indexed by their respective message ids.\n\t\t\tthis._receivedMessages = {};\n\n\t\t\t// Internal list of callbacks to be executed when messages\n\t\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\t// Unique identifier for SEND messages, incrementing\n\t\t\t// counter as messages are sent.\n\t\t\tthis._message_identifier = 1;\n\n\t\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\t\tthis._sequence = 0;\n\n\n\t\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\t\tfor (var key in localStorage)\n\t\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) === 0 || key.indexOf(\"Received:\"+this._localKey) === 0)\n\t\t\t\t\tthis.restore(key);\n\t\t};\n\n\t\t// Messaging Client public instance members.\n\t\tClientImpl.prototype.host = null;\n\t\tClientImpl.prototype.port = null;\n\t\tClientImpl.prototype.path = null;\n\t\tClientImpl.prototype.uri = null;\n\t\tClientImpl.prototype.clientId = null;\n\n\t\t// Messaging Client private instance members.\n\t\tClientImpl.prototype.socket = null;\n\t\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\t\tClientImpl.prototype.connected = false;\n\t\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t\t */\n\t\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\t\tClientImpl.prototype.connectOptions = null;\n\t\tClientImpl.prototype.hostIndex = null;\n\t\tClientImpl.prototype.onConnected = null;\n\t\tClientImpl.prototype.onConnectionLost = null;\n\t\tClientImpl.prototype.onMessageDelivered = null;\n\t\tClientImpl.prototype.onMessageArrived = null;\n\t\tClientImpl.prototype.traceFunction = null;\n\t\tClientImpl.prototype._msg_queue = null;\n\t\tClientImpl.prototype._buffered_msg_queue = null;\n\t\tClientImpl.prototype._connectTimeout = null;\n\t\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\t\tClientImpl.prototype.sendPinger = null;\n\t\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\t\tClientImpl.prototype.receivePinger = null;\n\t\tClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\t\tClientImpl.prototype._reconnecting = false;\n\t\tClientImpl.prototype._reconnectTimeout = null;\n\t\tClientImpl.prototype.disconnectedPublishing = false;\n\t\tClientImpl.prototype.disconnectedBufferSize = 5000;\n\n\t\tClientImpl.prototype.receiveBuffer = null;\n\n\t\tClientImpl.prototype._traceBuffer = null;\n\t\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\t\tClientImpl.prototype.connect = function (connectOptions) {\n\t\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\t\tif (this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\tif (this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// connect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process to use new connect options.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tthis.connectOptions = connectOptions;\n\t\t\tthis._reconnectInterval = 1;\n\t\t\tthis._reconnecting = false;\n\t\t\tif (connectOptions.uris) {\n\t\t\t\tthis.hostIndex = 0;\n\t\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t\t} else {\n\t\t\t\tthis._doConnect(this.uri);\n\t\t\t}\n\n\t\t};\n\n\t\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n            if (subscribeOptions.qos === undefined)\n                subscribeOptions.qos = 0;\n            wireMessage.requestedQos = [];\n            for (var i = 0; i < wireMessage.topics.length; i++)\n                wireMessage.requestedQos[i] = subscribeOptions.qos;\n\n\t\t\tif (subscribeOptions.onSuccess) {\n\t\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.onFailure) {\n\t\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All subscriptions return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n\n\t\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t\t}\n\t\t\tif (unsubscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All unsubscribes return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.send = function (message) {\n\t\t\tthis._trace(\"Client.send\", message);\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\t\twireMessage.payloadMessage = message;\n\n\t\t\tif (this.connected) {\n\t\t\t// Mark qos 1 & 2 message as \"ACK required\"\n\t\t\t// For qos 0 message, invoke onMessageDelivered callback if there is one.\n\t\t\t// Then schedule the message.\n\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t} else if (this.onMessageDelivered) {\n\t\t\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tthis._schedule_message(wireMessage);\n\t\t\t} else {\n\t\t\t// Currently disconnected, will not schedule this message\n\t\t\t// Check if reconnecting is in progress and disconnected publish is enabled.\n\t\t\t\tif (this._reconnecting && this.disconnectedPublishing) {\n\t\t\t\t// Check the limit which include the \"required ACK\" messages\n\t\t\t\t\tvar messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\t\t\t\t\tif (messageCount > this.disconnectedBufferSize) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\t\t// Mark this message as \"ACK required\"\n\t\t\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\t\t\t\t\tthis._buffered_msg_queue.unshift(wireMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.disconnect = function () {\n\t\t\tthis._trace(\"Client.disconnect\");\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// disconnect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tif (!this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t\t// in case of a failure later on in the disconnect processing.\n\t\t\t// as a consequence, the _disconected call back may be run several times.\n\t\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.getTraceLog = function () {\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\t\tfor (var key in this._sentMessages)\n\t\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\t\treturn this._traceBuffer;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.startTrace = function () {\n\t\t\tif ( this._traceBuffer === null ) {\n\t\t\t\tthis._traceBuffer = [];\n\t\t\t}\n\t\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t\t};\n\n\t\tClientImpl.prototype.stopTrace = function () {\n\t\t\tdelete this._traceBuffer;\n\t\t};\n\n\t\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\t\tif (this.connectOptions.useSSL) {\n\t\t\t\tvar uriParts = wsurl.split(\":\");\n\t\t\t\turiParts[0] = \"wss\";\n\t\t\t\twsurl = uriParts.join(\":\");\n\t\t\t}\n\t\t\tthis._wsuri = wsurl;\n\t\t\tthis.connected = false;\n\n\n\n\t\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t\t} else {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t\t}\n\t\t\tthis.socket.binaryType = \"arraybuffer\";\n\t\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\t\tthis.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tthis.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\t\t\tthis._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t\t};\n\n\n\t\t// Schedule a new message to be sent over the WebSockets\n\t\t// connection. CONNECT messages cause WebSocket connection\n\t\t// to be started. All other messages are queued internally\n\t\t// until this has happened. When WS connection starts, process\n\t\t// all outstanding messages.\n\t\tClientImpl.prototype._schedule_message = function (message) {\n\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\tthis._msg_queue.unshift(message);\n\t\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\t\tif (this.connected) {\n\t\t\t\tthis._process_queue();\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif(wireMessage.pubRecReceived)\n\t\t\t\t\tstoredMessage.pubRecReceived = true;\n\n\t\t\t\t// Convert the payload to a hex string.\n\t\t\t\tstoredMessage.payloadMessage = {};\n\t\t\t\tvar hex = \"\";\n\t\t\t\tvar messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t\tfor (var i=0; i<messageBytes.length; i++) {\n\t\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t\t\thex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\t\telse\n\t\t\t\t\t\thex = hex+messageBytes[i].toString(16);\n\t\t\t\t}\n\t\t\t\tstoredMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t\tstoredMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t\tstoredMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t\tif (wireMessage.payloadMessage.duplicate)\n\t\t\t\t\tstoredMessage.payloadMessage.duplicate = true;\n\t\t\t\tif (wireMessage.payloadMessage.retained)\n\t\t\t\t\tstoredMessage.payloadMessage.retained = true;\n\n\t\t\t\t// Add a sequence number to sent messages.\n\t\t\t\tif ( prefix.indexOf(\"Sent:\") === 0 ) {\n\t\t\t\t\tif ( wireMessage.sequence === undefined )\n\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\tstoredMessage.sequence = wireMessage.sequence;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));\n\t\t\t}\n\t\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t\t};\n\n\t\tClientImpl.prototype.restore = function(key) {\n\t\t\tvar value = localStorage.getItem(key);\n\t\t\tvar storedMessage = JSON.parse(value);\n\n\t\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\t\tswitch(storedMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// Replace the payload message with a Message object.\n\t\t\t\tvar hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t\tvar buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (hex.length >= 2) {\n\t\t\t\t\tvar x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t\thex = hex.substring(2, hex.length);\n\t\t\t\t\tbyteStream[i++] = x;\n\t\t\t\t}\n\t\t\t\tvar payloadMessage = new Message(byteStream);\n\n\t\t\t\tpayloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t\tpayloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t\tif (storedMessage.payloadMessage.duplicate)\n\t\t\t\t\tpayloadMessage.duplicate = true;\n\t\t\t\tif (storedMessage.payloadMessage.retained)\n\t\t\t\t\tpayloadMessage.retained = true;\n\t\t\t\twireMessage.payloadMessage = payloadMessage;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t\t}\n\n\t\t\tif (key.indexOf(\"Sent:\"+this._localKey) === 0) {\n\t\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t} else if (key.indexOf(\"Received:\"+this._localKey) === 0) {\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._process_queue = function () {\n\t\t\tvar message = null;\n\n\t\t\t// Send all queued messages down socket connection\n\t\t\twhile ((message = this._msg_queue.pop())) {\n\t\t\t\tthis._socket_send(message);\n\t\t\t\t// Notify listeners that message was successfully sent\n\t\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\t\tthis._message_identifier++;\n\t\t\t}\n\t\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t\t}\n\t\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\t\tthis._message_identifier = 1;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\t\twireMessage.clientId = this.clientId;\n\t\t\tthis._socket_send(wireMessage);\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_message = function (event) {\n\t\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t\tvar messages = this._deframeMessages(event.data);\n\t\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t\t\tthis._handleMessage(messages[i]);\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._deframeMessages = function(data) {\n\t\t\tvar byteArray = new Uint8Array(data);\n\t\t\tvar messages = [];\n\t\t\tif (this.receiveBuffer) {\n\t\t\t\tvar newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t\t\t\tnewData.set(this.receiveBuffer);\n\t\t\t\tnewData.set(byteArray,this.receiveBuffer.length);\n\t\t\t\tbyteArray = newData;\n\t\t\t\tdelete this.receiveBuffer;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile(offset < byteArray.length) {\n\t\t\t\t\tvar result = decodeMessage(byteArray,offset);\n\t\t\t\t\tvar wireMessage = result[0];\n\t\t\t\t\toffset = result[1];\n\t\t\t\t\tif (wireMessage !== null) {\n\t\t\t\t\t\tmessages.push(wireMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offset < byteArray.length) {\n\t\t\t\t\tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn messages;\n\t\t};\n\n\t\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\t\ttry {\n\t\t\t\tswitch(wireMessage.type) {\n\t\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\tif (this._reconnectTimeout)\n\t\t\t\t\t\tthis._reconnectTimeout.cancel();\n\n\t\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t\t}\n\t\t\t\t\t// Client connected and ready for business.\n\t\t\t\t\tif (wireMessage.returnCode === 0) {\n\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\n\t\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resend messages.\n\t\t\t\t\tvar sequencedMessages = [];\n\t\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Also schedule qos 0 buffered messages if any\n\t\t\t\t\tif (this._buffered_msg_queue.length > 0) {\n\t\t\t\t\t\tvar msg = null;\n\t\t\t\t\t\twhile ((msg = this._buffered_msg_queue.pop())) {\n\t\t\t\t\t\t\tsequencedMessages.push(msg);\n\t\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\t\tthis._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\t\t// Will also now return if this connection was the result of an automatic\n\t\t\t\t\t// reconnect and which URI was successfully connected to.\n\t\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar reconnected = false;\n\t\t\t\t\tif (this._reconnecting) {\n\t\t\t\t\t\treconnected = true;\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnecting = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the onConnected callback if there is one.\n\t\t\t\t\tthis._connected(reconnected, this._wsuri);\n\n\t\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\t\tthis._process_queue();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (receivedMessage) {\n\t\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis._schedule_message(pubCompMessage);\n\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n\t\t\t\t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\t\tthis.sendPinger.reset();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_error = function (error) {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_close = function () {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\t\tif (wireMessage.type == 1) {\n\t\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t\t}\n\t\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\t\tthis.socket.send(wireMessage.encode());\n\t\t\t/* We have proved to the server we are alive. */\n\t\t\tthis.sendPinger.reset();\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\t\tif (this.onMessageArrived) {\n\t\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has connected.\n\t * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n\t * @param {uri} [string] fully qualified WebSocket URI of the server.\n\t */\n\t\tClientImpl.prototype._connected = function (reconnect, uri) {\n\t\t// Execute the onConnected callback if there is one.\n\t\t\tif (this.onConnected)\n\t\t\t\tthis.onConnected(reconnect, uri);\n\t\t};\n\n\t\t/**\n\t * Attempts to reconnect the client to the server.\n   * For each reconnect attempt, will double the reconnect interval\n   * up to 128 seconds.\n\t */\n\t\tClientImpl.prototype._reconnect = function () {\n\t\t\tthis._trace(\"Client._reconnect\");\n\t\t\tif (!this.connected) {\n\t\t\t\tthis._reconnecting = true;\n\t\t\t\tthis.sendPinger.cancel();\n\t\t\t\tthis.receivePinger.cancel();\n\t\t\t\tif (this._reconnectInterval < 128)\n\t\t\t\t\tthis._reconnectInterval = this._reconnectInterval * 2;\n\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\t\tif (errorCode !== undefined && this._reconnecting) {\n\t\t\t\t//Continue automatic reconnect process\n\t\t\t\tthis._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendPinger.cancel();\n\t\t\tthis.receivePinger.cancel();\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\n\t\t\t// Clear message buffers.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\t\tthis.socket.onopen = null;\n\t\t\t\tthis.socket.onmessage = null;\n\t\t\t\tthis.socket.onerror = null;\n\t\t\t\tthis.socket.onclose = null;\n\t\t\t\tif (this.socket.readyState === 1)\n\t\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\n\t\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\t\tthis.hostIndex++;\n\t\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\t} else {\n\n\t\t\t\tif (errorCode === undefined) {\n\t\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t\t}\n\n\t\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.connected = false;\n\t\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\t\tif (this.onConnectionLost) {\n\t\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});\n\t\t\t\t\t}\n\t\t\t\t\tif (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n\t\t\t\t\t// Start automatic reconnect process for the very first time since last successful connect.\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnect();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\");\n\t\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\t\tif (this.traceFunction) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tfor (var i in args)\n\t\t\t\t{\n\t\t\t\t\tif (typeof args[i] !== \"undefined\")\n\t\t\t\t\t\targs.splice(i, 1, JSON.stringify(args[i]));\n\t\t\t\t}\n\t\t\t\tvar record = args.join(\"\");\n\t\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t\t}\n\n\t\t\t//buffer style trace\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\t\tvar traceObjectMasked = {};\n\t\t\tfor (var attr in traceObject) {\n\t\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\t\tif (attr == masked)\n\t\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn traceObjectMasked;\n\t\t};\n\n\t\t// ------------------------------------------------------------------------\n\t\t// Public Programming interface.\n\t\t// ------------------------------------------------------------------------\n\n\t\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered - called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that has arrived.\n\t *                            </ol>\n\t * @property {function} onConnected - called when a connection is successfully made to the server.\n\t *                                  after a connect() method.\n\t *                                  Parameters passed to the onConnected callback are:\n\t *                                  <ol>\n\t *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n\t *                                  <li>URI (string) - The URI used to connect to the server.</li>\n\t *                                  </ol>\n\t * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n\t *                                            in the event that the connection to the server is lost.\n\t * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n\t *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n\t * @property {function} trace - called whenever trace is called. TODO\n\t */\n\t\tvar Client = function (host, port, path, clientId) {\n\n\t\t\tvar uri;\n\n\t\t\tif (typeof host !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t// host: must be full ws:// uri\n\t\t\t// port: clientId\n\t\t\t\tclientId = port;\n\t\t\t\turi = host;\n\t\t\t\tvar match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\thost = match[4]||match[2];\n\t\t\t\t\tport = parseInt(match[7]);\n\t\t\t\t\tpath = match[8];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (arguments.length == 3) {\n\t\t\t\t\tclientId = path;\n\t\t\t\t\tpath = \"/mqtt\";\n\t\t\t\t}\n\t\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\t\tif (typeof path !== \"string\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") !== -1 && host.slice(0,1) !== \"[\" && host.slice(-1) !== \"]\");\n\t\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t}\n\n\t\t\tvar clientIdLength = 0;\n\t\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t\ti++; // Surrogate pair.\n\t\t\t\t}\n\t\t\t\tclientIdLength++;\n\t\t\t}\n\t\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\n\t\t\t//Public Properties\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"host\":{\n\t\t\t\t\tget: function() { return host; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"port\":{\n\t\t\t\t\tget: function() { return port; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"path\":{\n\t\t\t\t\tget: function() { return path; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"uri\":{\n\t\t\t\t\tget: function() { return uri; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"clientId\":{\n\t\t\t\t\tget: function() { return client.clientId; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"onConnected\":{\n\t\t\t\t\tget: function() { return client.onConnected; },\n\t\t\t\t\tset: function(newOnConnected) {\n\t\t\t\t\t\tif (typeof newOnConnected === \"function\")\n\t\t\t\t\t\t\tclient.onConnected = newOnConnected;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedPublishing\":{\n\t\t\t\t\tget: function() { return client.disconnectedPublishing; },\n\t\t\t\t\tset: function(newDisconnectedPublishing) {\n\t\t\t\t\t\tclient.disconnectedPublishing = newDisconnectedPublishing;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedBufferSize\":{\n\t\t\t\t\tget: function() { return client.disconnectedBufferSize; },\n\t\t\t\t\tset: function(newDisconnectedBufferSize) {\n\t\t\t\t\t\tclient.disconnectedBufferSize = newDisconnectedBufferSize;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onConnectionLost\":{\n\t\t\t\t\tget: function() { return client.onConnectionLost; },\n\t\t\t\t\tset: function(newOnConnectionLost) {\n\t\t\t\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageDelivered\":{\n\t\t\t\t\tget: function() { return client.onMessageDelivered; },\n\t\t\t\t\tset: function(newOnMessageDelivered) {\n\t\t\t\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageArrived\":{\n\t\t\t\t\tget: function() { return client.onMessageArrived; },\n\t\t\t\t\tset: function(newOnMessageArrived) {\n\t\t\t\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"trace\":{\n\t\t\t\t\tget: function() { return client.traceFunction; },\n\t\t\t\t\tset: function(trace) {\n\t\t\t\t\t\tif(typeof trace === \"function\"){\n\t\t\t\t\t\t\tclient.traceFunction = trace;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.Client#connect\n\t\t * @function\n\t\t * @param {object} connectOptions - Attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n\t * to the server if the connection is lost.\n\t *<ul>\n\t *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n\t * connection is lost.</li>\n\t *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n\t * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n\t * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n\t *</ul>\n\t * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n\t *<ul>\n\t *<li>3 - MQTT V3.1</li>\n\t *<li>4 - MQTT V3.1.1</li>\n\t *</ul>\n\t * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n\t * selected MQTT Version or will fail to connect.\n\t * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n\t * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n\t * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n\t * the hosts array will be converted to uris and will overwrite this property.\n\t\t * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\t\tthis.connect = function (connectOptions) {\n\t\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\tuserName:\"string\",\n\t\t\t\t\tpassword:\"string\",\n\t\t\t\t\twillMessage:\"object\",\n\t\t\t\t\tkeepAliveInterval:\"number\",\n\t\t\t\t\tcleanSession:\"boolean\",\n\t\t\t\t\tuseSSL:\"boolean\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\thosts:\"object\",\n\t\t\t\t\tports:\"object\",\n\t\t\t\t\treconnect:\"boolean\",\n\t\t\t\t\tmqttVersion:\"number\",\n\t\t\t\t\tmqttVersionExplicit:\"boolean\",\n\t\t\t\t\turis: \"object\"});\n\n\t\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t\t}\n\n\t\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t\t}\n\n\t\t\t\t//Check that if password is set, so is username\n\t\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n\t\t\t\tif (connectOptions.willMessage) {\n\t\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\t\tconnectOptions.willMessage.stringPayload = null;\n\n\t\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t\t}\n\t\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\t\tvar usingURIs = false;\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!usingURIs) {\n\t\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (connectOptions.hosts.length !== connectOptions.ports.length)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") !== -1);\n\t\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.connect(connectOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t\t\t\t\t\t\t\t\t\t  or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Publish a message to the consumers of the destination in the Message.\n\t\t * Synonym for Paho.Mqtt.Client#send\n\t\t *\n\t\t * @name Paho.Client#publish\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be published.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.publish = function(topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\t\tthis.disconnect = function () {\n\t\t\t\tclient.disconnect();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\t\tthis.getTraceLog = function () {\n\t\t\t\treturn client.getTraceLog();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.Client#startTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.startTrace = function () {\n\t\t\t\tclient.startTrace();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.stopTrace = function () {\n\t\t\t\tclient.stopTrace();\n\t\t\t};\n\n\t\t\tthis.isConnected = function() {\n\t\t\t\treturn client.connected;\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\t\tvar Message = function (newPayload) {\n\t\t\tvar payload;\n\t\t\tif (   typeof newPayload === \"string\" ||\n\t\tnewPayload instanceof ArrayBuffer ||\n\t\t(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))\n\t\t\t) {\n\t\t\t\tpayload = newPayload;\n\t\t\t} else {\n\t\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t\t}\n\n\t\t\tvar destinationName;\n\t\t\tvar qos = 0;\n\t\t\tvar retained = false;\n\t\t\tvar duplicate = false;\n\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"payloadString\":{\n\t\t\t\t\tenumerable : true,\n\t\t\t\t\tget : function () {\n\t\t\t\t\t\tif (typeof payload === \"string\")\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payloadBytes\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tif (typeof payload === \"string\") {\n\t\t\t\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\t\t\t\treturn byteStream;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"destinationName\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newDestinationName) {\n\t\t\t\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\t\t\t\tdestinationName = newDestinationName;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"qos\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return qos; },\n\t\t\t\t\tset: function(newQos) {\n\t\t\t\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\t\t\t\tqos = newQos;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"retained\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return retained; },\n\t\t\t\t\tset: function(newRetained) {\n\t\t\t\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\t\t\t\tretained = newRetained;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"topic\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newTopic) {destinationName=newTopic;}\n\t\t\t\t},\n\t\t\t\t\"duplicate\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return duplicate; },\n\t\t\t\t\tset: function(newDuplicate) {duplicate=newDuplicate;}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Module contents.\n\t\treturn {\n\t\t\tClient: Client,\n\t\t\tMessage: Message\n\t\t};\n\t// eslint-disable-next-line no-nested-ternary\n\t})(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\treturn PahoMQTT;\n});\n","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-title>\\n      MQTT Connection\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content [fullscreen]=\\\"true\\\">\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size-md=\\\"6\\\" offset=\\\"3\\\">\\n        <ion-card>\\n          <ion-card-header>\\n            Influx DBS\\n          </ion-card-header>\\n          <ion-card-header>\\n            <div>\\n              Default IPv4 address for MQTT broker is 13.49.46.146 with port\\n              9001\\n            </div>\\n          </ion-card-header>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Remote Address</ion-label>\\n            <ion-input\\n              type=\\\"text\\\"\\n              [(ngModel)]=\\\"mqtt_url\\\"\\n              placeholder=\\\"13.49.46.146\\\"\\n            ></ion-input>\\n          </ion-item>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Port</ion-label>\\n            <ion-input\\n              type=\\\"number\\\"\\n              [(ngModel)]=\\\"mqtt_port\\\"\\n              placeholder=\\\"9001\\\"\\n            ></ion-input>\\n          </ion-item>\\n          <div margin-vertical>\\n            <ion-button\\n              id=\\\"btn-url-confirm\\\"\\n              type=\\\"submit\\\"\\n              (click)=\\\"connectMQTTBroker()\\\"\\n              ><ion-icon slot=\\\"start\\\" name=\\\"add\\\"></ion-icon>Connect</ion-button\\n            >\\n            <ion-button\\n              fill=\\\"outline\\\"\\n              color=\\\"danger\\\"\\n              id=\\\"btn-url-cancel\\\"\\n              type=\\\"submit\\\"\\n              (click)=\\\"disconnectMQTTBroker()\\\"\\n              ><ion-icon slot=\\\"start\\\" name=\\\"close\\\"></ion-icon\\n              >Disconnect</ion-button\\n            >\\n          </div>\\n\\n          <div margin-vertical>\\n            <div>\\n              Connection status: {{mqttBrokerConnectFlag}} {{connectedMQTTUrl}}\\n            </div>\\n          </div>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col> </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size-md=\\\"6\\\" offset=\\\"3\\\">\\n        <form>\\n          <ion-card>\\n            <ion-card-header>\\n              Data\\n              <ion-item>Listening: {{listeningFlag}}</ion-item>\\n            </ion-card-header>\\n            <ion-item>\\n              <div>X: {{x}}</div>\\n            </ion-item>\\n            <ion-item>\\n              <div>Y: {{y}}</div>\\n            </ion-item>\\n            <ion-item>\\n              <div>Z: {{z}}</div>\\n            </ion-item>\\n            <div margin-vertical>\\n              <ion-button type=\\\"submit\\\" (click)=\\\"startListening()\\\"\\n                ><ion-icon slot=\\\"start\\\" name=\\\"add\\\"></ion-icon>Start\\n                Listening</ion-button\\n              >\\n              <ion-button\\n                fill=\\\"outline\\\"\\n                color=\\\"danger\\\"\\n                type=\\\"reset\\\"\\n                (click)=\\\"stopListening()\\\"\\n                ><ion-icon slot=\\\"start\\\" name=\\\"close\\\"></ion-icon>Stop\\n                Listening</ion-button\\n              >\\n              <ion-item>\\n                <ion-label>Send Data</ion-label>\\n                <ion-checkbox\\n                  slot=\\\"end\\\"\\n                  color=\\\"primary\\\"\\n                  (ionChange)=\\\"enableSending($event)\\\"\\n                >\\n                </ion-checkbox>\\n              </ion-item>\\n            </div>\\n          </ion-card>\\n        </form>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col> </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: HomePage\n      }\n    ])\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n","export default \"#container {\\n  text-align: center;\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 50%;\\n  -webkit-transform: translateY(-50%);\\n          transform: translateY(-50%);\\n}\\n\\n#container strong {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n#container p {\\n  font-size: 16px;\\n  line-height: 22px;\\n  color: #8c8c8c;\\n  margin: 0;\\n}\\n\\n#container a {\\n  text-decoration: none;\\n}\\n\\nion-content ion-toolbar {\\n  --background: translucent;\\n}\\n\\n.button_group button {\\n  background-color: white;\\n  border: 1px solid black;\\n  color: black;\\n  padding: 10px 24px;\\n  float: left;\\n}\\n\\n.button_group button:not(:last-child) {\\n  border-right: none;\\n}\\n\\n.button_group:after {\\n  content: \\\"\\\";\\n  clear: both;\\n  display: table;\\n}\\n\\n.button_group button:hover {\\n  background-color: gray;\\n  color: white;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuaHR1bWFpL0RvY3VtZW50cy9Ob2RlSlNQbGF5Z3JvdW5kL0FjY2VsZXJvbWV0ZXJfdG9fSW5mbHV4REIvQWNjZWxlcm9tZXRlcl90b19JbmZsdXhEQi1tYXN0ZXIvc3JjL2FwcC9ob21lL2hvbWUucGFnZS5zY3NzIiwic3JjL2FwcC9ob21lL2hvbWUucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usa0JBQUE7RUFFQSxrQkFBQTtFQUNBLE9BQUE7RUFDQSxRQUFBO0VBQ0EsUUFBQTtFQUNBLG1DQUFBO1VBQUEsMkJBQUE7QUNBRjs7QURHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQ0FGOztBREdBO0VBQ0UsZUFBQTtFQUNBLGlCQUFBO0VBRUEsY0FBQTtFQUVBLFNBQUE7QUNGRjs7QURLQTtFQUNFLHFCQUFBO0FDRkY7O0FES0E7RUFDRSx5QkFBQTtBQ0ZGOztBREtBO0VBQ0UsdUJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFdBQUE7QUNGRjs7QURLQTtFQUNFLGtCQUFBO0FDRkY7O0FES0E7RUFDRSxXQUFBO0VBQ0EsV0FBQTtFQUNBLGNBQUE7QUNGRjs7QURLQTtFQUNFLHNCQUFBO0VBQ0EsWUFBQTtBQ0ZGIiwiZmlsZSI6InNyYy9hcHAvaG9tZS9ob21lLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG4jY29udGFpbmVyIHAge1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xuXG4gIGNvbG9yOiAjOGM4YzhjO1xuXG4gIG1hcmdpbjogMDtcbn1cblxuI2NvbnRhaW5lciBhIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5pb24tY29udGVudCBpb24tdG9vbGJhciB7XG4gIC0tYmFja2dyb3VuZDogdHJhbnNsdWNlbnQ7XG59XG5cbi5idXR0b25fZ3JvdXAgYnV0dG9uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICBjb2xvcjogYmxhY2s7XG4gIHBhZGRpbmc6IDEwcHggMjRweDtcbiAgZmxvYXQ6IGxlZnQ7XG59XG5cbi5idXR0b25fZ3JvdXAgYnV0dG9uOm5vdCg6bGFzdC1jaGlsZCkge1xuICBib3JkZXItcmlnaHQ6IG5vbmU7XG59XG5cbi5idXR0b25fZ3JvdXA6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBjbGVhcjogYm90aDtcbiAgZGlzcGxheTogdGFibGU7XG59XG5cbi5idXR0b25fZ3JvdXAgYnV0dG9uOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JheTtcbiAgY29sb3I6IHdoaXRlO1xufVxuIiwiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG4jY29udGFpbmVyIHAge1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xuICBjb2xvcjogIzhjOGM4YztcbiAgbWFyZ2luOiAwO1xufVxuXG4jY29udGFpbmVyIGEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbmlvbi1jb250ZW50IGlvbi10b29sYmFyIHtcbiAgLS1iYWNrZ3JvdW5kOiB0cmFuc2x1Y2VudDtcbn1cblxuLmJ1dHRvbl9ncm91cCBidXR0b24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gIGNvbG9yOiBibGFjaztcbiAgcGFkZGluZzogMTBweCAyNHB4O1xuICBmbG9hdDogbGVmdDtcbn1cblxuLmJ1dHRvbl9ncm91cCBidXR0b246bm90KDpsYXN0LWNoaWxkKSB7XG4gIGJvcmRlci1yaWdodDogbm9uZTtcbn1cblxuLmJ1dHRvbl9ncm91cDphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGNsZWFyOiBib3RoO1xuICBkaXNwbGF5OiB0YWJsZTtcbn1cblxuLmJ1dHRvbl9ncm91cCBidXR0b246aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmF5O1xuICBjb2xvcjogd2hpdGU7XG59Il19 */\"","import { Component } from \"@angular/core\";\nimport {\n  DeviceMotion,\n  DeviceMotionAccelerationData,\n  DeviceMotionAccelerometerOptions,\n} from \"@ionic-native/device-motion/ngx\";\n\nimport * as MQTT from \"paho-mqtt\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-home\",\n  templateUrl: \"home.page.html\",\n  styleUrls: [\"home.page.scss\"],\n})\nexport class HomePage {\n  mqtt_url: string;\n  mqtt_port: number;\n\n  x: string;\n  y: string;\n  z: string;\n  timestamp: any;\n  gra_x: number;\n  gra_y: number;\n  gra_z: number;\n  alpha: number;\n\n  acceleration_observer: Observable<DeviceMotionAccelerationData>;\n  acceleration_subscriber: any;\n  connectedMQTTUrl: string;\n\n  mqttBrokerConnectFlag: boolean;\n  listeningFlag: boolean;\n  sendingMQTTFlag: boolean;\n\n  // topics: string[] = [\n  //   \"telegraf/x\",\n  //   \"telegraf/y\",\n  //   \"telegraf/z\",\n  //   \"telegraf/timestamp\",\n  // ];\n\n  client: MQTT.Client;\n\n  constructor() {\n    this.x = \"-\";\n    this.y = \"-\";\n    this.z = \"-\";\n\n    this.mqtt_url = \"13.49.46.146\";\n    this.mqtt_port = 9001;\n\n    this.alpha = 0.8;\n    this.gra_x = 0;\n    this.gra_y = 0;\n    this.gra_z = 0;\n\n    this.connectedMQTTUrl = \"\";\n\n    this.mqttBrokerConnectFlag = false;\n    this.listeningFlag = false;\n    this.sendingMQTTFlag = false;\n  }\n\n  connectToMQTTBroker(hostname: string, port: number, id: string) {\n    let options = {\n      timeout: 60,\n      useSSL: false,\n      onSuccess: this.onConnect.bind(this),\n      onFailure: this.onFailure.bind(this),\n    };\n    this.client = new MQTT.Client(hostname, port, id);\n\n    this.client.onConnectionLost = this.onConnectionLost.bind(this);\n    this.client.onMessageArrived = this.onMessageArrived.bind(this);\n    this.client.connect(options);\n  }\n\n  disconnectMQTTBroker() {\n    this.client.disconnect();\n    this.mqttBrokerConnectFlag = false;\n    this.client = undefined;\n    this.connectedMQTTUrl = \"\";\n  }\n\n  onConnect() {\n    console.log(\"onConnect\");\n    this.mqttBrokerConnectFlag = true;\n    this.connectedMQTTUrl = this.mqtt_url + \":\" + this.mqtt_port;\n\n    console.log(this.client);\n    console.log(this.mqttBrokerConnectFlag);\n    console.log(this);\n  }\n  onFailure() {\n    console.log(\"onFailure\");\n    this.mqttBrokerConnectFlag = false;\n    this.client = undefined;\n\n    alert(\"Fail to connect to MQTT broker, please recheck\");\n  }\n\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n      this.mqttBrokerConnectFlag = false;\n      this.client = undefined;\n    }\n  }\n  onMessageArrived(message) {\n    console.log(\"onMessageArrived:\" + message.payloadString);\n  }\n\n  sendMessage() {\n    const value = JSON.stringify({\n      \"x\": parseFloat(this.x),\n      \"y\": parseFloat(this.y),\n      \"z\": parseFloat(this.z),\n      \"timestamp\": parseInt(this.timestamp)\n    });\n    let message = new MQTT.Message(value);\n    message.destinationName = \"telegraf/t\";\n    this.client.send(message);\n\n    //Test section \n    // let test_message = new MQTT.Message(\"1\");\n    // test_message.destinationName = \"telegraf/x\";\n    // this.client.send(test_message);\n    // console.log(test_message);\n  }\n\n  async startListening() {\n    if (this.listeningFlag == true) {\n      return;\n    }\n    this.listeningFlag = true;\n    var option: DeviceMotionAccelerometerOptions = {\n      frequency: 50,\n    };\n    this.acceleration_subscriber = new DeviceMotion()\n      .watchAcceleration(option)\n      .subscribe((acceleration: DeviceMotionAccelerationData) => {\n        console.log(\"get message\");\n        this.getAccelerationData(acceleration);\n        if (\n          this.sendingMQTTFlag == true &&\n          this.mqttBrokerConnectFlag == true\n        ) {\n          this.sendMessage();\n        }\n      });\n  }\n  stopListening() {\n    this.acceleration_subscriber.unsubscribe();\n    this.listeningFlag = false;\n  }\n  getAccelerationData(acceleration: DeviceMotionAccelerationData) {\n    this.gra_x = this.alpha * this.gra_x + (1 - this.alpha) * acceleration.x;\n    this.gra_y = this.alpha * this.gra_y + (1 - this.alpha) * acceleration.y;\n    this.gra_z = this.alpha * this.gra_z + (1 - this.alpha) * acceleration.z;\n\n    this.x = \"\" + (acceleration.x - this.gra_x).toFixed(4);\n    this.y = \"\" + (acceleration.y - this.gra_y).toFixed(4);\n    this.z = \"\" + (acceleration.z - this.gra_z).toFixed(4);\n    this.timestamp = acceleration.timestamp.toFixed(0);\n  }\n\n  sendOneTime() {\n    console.log(\"send one time\");\n    this.sendMessage();\n  }\n\n  clearUrlNPort() {\n    this.mqtt_port = null;\n    this.mqtt_url = \"\";\n  }\n\n  connectMQTTBroker() {\n    if (this.mqttBrokerConnectFlag == true || this.client != undefined) {\n      alert(\"Already been connected\");\n      return;\n    }\n    if (this.mqtt_port == null) {\n      alert(\"Enter port\");\n      return;\n    }\n    if (this.mqtt_url == \"\") {\n      alert(\"Enter Remote address\");\n      return;\n    }\n    this.connectToMQTTBroker(this.mqtt_url, this.mqtt_port, \"Client_Tablet\");\n\n    // this.clearUrlNPort();\n  }\n\n  enableSending(event: any) {\n    this.sendingMQTTFlag = event.target.checked;\n  }\n}\n"],"sourceRoot":"webpack:///","file":"home-home-module-es5.js"}